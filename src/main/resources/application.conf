akka {
  daemonic=on
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "INFO"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  log-dead-letters = 0
  log-dead-letters-during-shutdown = false

  actor.provider = "akka.cluster.ClusterActorRefProvider"

  remote = {
    netty.tcp {
      hostname = "127.0.0.1"
      port = 2551
      maximum-frame-size = 512000
    }
  }

  cluster {
    log-info = on
    use-dispatcher = "cluster-dispatcher"
    roles = ["processor"]
    min-nr-of-members = 6
    failure-detector {
      implementation-class = "akka.remote.PhiAccrualFailureDetector"
      threshold = 10.0
      heartbeat-interval = 1 s
      min-std-deviation = 100 ms
      acceptable-heartbeat-pause = 3 s
    }
    auto-down-unreachable-after = 10s
  }
  persistence {
    journal.plugin = "cassandra-journal"
    snapshot-store.plugin = "cassandra-snapshot-store"
  }
}

cassandra-journal {
  keyspace = "dm_keyspace_dev"
  keyspace-autocreate = false
  table = "processormessages"
  contact-points = ["cassandra01.weave.local"]
  read-consistency = "LOCAL_QUORUM"
  write-consistency = "LOCAL_QUORUM"
}

cassandra-snapshot-store {
  keyspace = "dm_keyspace_dev"
  keyspace-autocreate = false
  table = "processorsnapshots"
  contact-points = ["cassandra01.weave.local"]
  read-consistency = "LOCAL_QUORUM"
  write-consistency = "LOCAL_QUORUM"
}

cluster-dispatcher {
  type = Dispatcher
  executor = "fork-join-executor"
  fork-join-executor {
    parallelism-min = 2
    parallelism-factor = 2.0
    parallelism-max = 10
  }
}

akka.contrib.cluster.sharding {
  # The extension creates a top level actor with this name in top level user scope,
  # e.g. '/user/sharding'
  guardian-name = sharding
  # Start the coordinator singleton manager on members tagged with this role.
  # All members are used if undefined or empty.
  # ShardRegion actor is started in proxy only mode on nodes that are not tagged
  # with this role.
  role = "processor"
  # The ShardRegion retries registration and shard location requests to the
  # ShardCoordinator with this interval if it does not reply.
  retry-interval = 2 s
  # Maximum number of messages that are buffered by a ShardRegion actor.
  buffer-size = 100000
  # Timeout of the shard rebalancing process.
  handoff-timeout = 60 s
  # Rebalance check is performed periodically with this interval.
  rebalance-interval = 10 s
  # How often the coordinator saves persistent snapshots, which are
  # used to reduce recovery times
  snapshot-interval = 3600 s
  # Setting for the default shard allocation strategy
  least-shard-allocation-strategy {
    # Threshold of how large the difference between most and least number of
    # allocated shards must be to begin the rebalancing.
    rebalance-threshold = 10
    # The number of ongoing rebalancing processes is limited to this number.
    max-simultaneous-rebalance = 3
  }
}
